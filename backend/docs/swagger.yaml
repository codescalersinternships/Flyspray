definitions:
  app.ResponseMsg:
    properties:
      data: {}
      msg:
        type: string
    type: object
  app.createBugInput:
    properties:
      category:
        type: string
      component_id:
        type: integer
      severity:
        type: string
      status:
        type: string
      summary:
        type: string
    required:
      - component_id
    type: object
  app.createCommentInput:
    properties:
      bug_id:
        type: integer
      summary:
        type: string
    required:
      - bug_id
      - summary
    type: object
  app.createComponentInput:
    properties:
      name:
        type: string
      project_id:
        type: string
    required:
      - name
      - project_id
    type: object
  app.createMemberInput:
    properties:
      admin:
        type: boolean
      project_id:
        type: integer
      user_id:
        type: string
    required:
      - project_id
      - user_id
    type: object
  app.createProjectInput:
    properties:
      name:
        type: string
    required:
      - name
    type: object
  app.signinBody:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  app.signupBody:
    properties:
      confirm_password:
        type: string
      email:
        type: string
      name:
        type: string
      password:
        type: string
    type: object
  app.updateBugInput:
    properties:
      category:
        type: string
      severity:
        type: string
      status:
        type: string
      summary:
        type: string
    type: object
  app.updateCommentInput:
    properties:
      summary:
        type: string
    required:
      - summary
    type: object
  app.updateComponentInput:
    properties:
      name:
        type: string
    required:
      - name
    type: object
  app.updateMemberInput:
    properties:
      admin:
        type: boolean
      project_id:
        type: integer
    type: object
  app.updateProjectInput:
    properties:
      name:
        type: string
      owner_id:
        type: string
    required:
      - name
      - owner_id
    type: object
  app.updateUserBody:
    properties:
      name:
        type: string
    type: object
  app.verifyBody:
    properties:
      email:
        type: string
      verification_code:
        type: integer
    type: object
swagger: "2.0"
info:
  title: Flyspray
  version: 1.0.0
  contact: {}
paths:
  /bug:
    post:
      consumes:
        - application/json
      description: Creates a new bug with the provided input
      parameters:
        - description: Bug data
          in: body
          name: bug
          required: true
          schema:
            $ref: "#/definitions/app.createBugInput"
      produces:
        - application/json
      responses:
        "201":
          description: bug is created successfully (Bug details in the 'Data' field)
          schema:
            $ref: "#/definitions/app.ResponseMsg"
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
        - ApiKeyAuth: []
      summary: Create a bug
      tags:
        - bugs
  /bug/{id}:
    delete:
      description: Deletes a bug by its ID
      parameters:
        - description: Bug ID
          in: path
          name: id
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: bug is deleted successfully
          schema:
            $ref: "#/definitions/app.ResponseMsg"
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
        - ApiKeyAuth: []
      summary: Delete a bug
      tags:
        - bugs
    get:
      description: Retrieves a bug by its ID
      parameters:
        - description: Bug ID
          in: path
          name: id
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: bug is retrieved successfully (Bug details in the 'Data' field)
          schema:
            $ref: "#/definitions/app.ResponseMsg"
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
        - ApiKeyAuth: []
      summary: Get a bug
      tags:
        - bugs
    put:
      consumes:
        - application/json
      description: Updates a bug with the provided data
      parameters:
        - description: Bug ID
          in: path
          name: id
          required: true
          type: string
        - description: Bug data
          in: body
          name: bug
          required: true
          schema:
            $ref: "#/definitions/app.updateBugInput"
      produces:
        - application/json
      responses:
        "200":
          description: bug is updated successfully
          schema:
            $ref: "#/definitions/app.ResponseMsg"
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
        - ApiKeyAuth: []
      summary: Update a bug
      tags:
        - bugs
  /bug/filters:
    get:
      description: Retrieves bugs based on the provided filters
      parameters:
        - description: Bug category
          in: query
          name: category
          type: string
        - description: Bug status
          in: query
          name: status
          type: string
        - description: Component ID
          in: query
          name: component_id
          type: string
      produces:
        - application/json
      responses:
        "200":
          description:
            bugs are retrieved successfully (Bugs details in the 'Data'
            field)
          schema:
            $ref: "#/definitions/app.ResponseMsg"
        "401":
          description: Unauthorized
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
        - ApiKeyAuth: []
      summary: Get bugs
      tags:
        - bugs
  /comment:
    post:
      consumes:
        - application/json
      description: Creates a new comment for a bug in the database
      parameters:
        - description: Comment input object
          in: body
          name: commentInput
          required: true
          schema:
            $ref: "#/definitions/app.createCommentInput"
      produces:
        - application/json
      responses:
        "201":
          description:
            Comment is created successfully (Comment details in the 'Data'
            field)
          schema:
            $ref: "#/definitions/app.ResponseMsg"
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
        - ApiKeyAuth: []
      summary: Creates a comment
      tags:
        - comments
  /comment/{id}:
    delete:
      description: Deletes a comment by its ID from the database
      parameters:
        - description: Comment ID
          in: path
          name: id
          required: true
          type: integer
      produces:
        - application/json
      responses:
        "200":
          description: comment is deleted successfully
          schema:
            $ref: "#/definitions/app.ResponseMsg"
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "403":
          description: Forbidden
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
        - ApiKeyAuth: []
      summary: Deletes a comment
      tags:
        - comments
    get:
      description: Retrieves a comment by its ID from the database
      parameters:
        - description: Comment ID
          in: path
          name: id
          required: true
          type: integer
      produces:
        - application/json
      responses:
        "200":
          description:
            comment is found successfully (Comment details in the 'Data'
            field)
          schema:
            $ref: "#/definitions/app.ResponseMsg"
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
        - ApiKeyAuth: []
      summary: Retrieves a comment
      tags:
        - comments
    put:
      consumes:
        - application/json
      description: Updates a comment by its ID in the database
      parameters:
        - description: Comment ID
          in: path
          name: id
          required: true
          type: integer
        - description: Updated comment data
          in: body
          name: input
          required: true
          schema:
            $ref: "#/definitions/app.updateCommentInput"
      produces:
        - application/json
      responses:
        "200":
          description: comment is updated successfully
          schema:
            $ref: "#/definitions/app.ResponseMsg"
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "403":
          description: Forbidden
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      security:
        - ApiKeyAuth: []
      summary: Updates a comment
      tags:
        - comments
  /comment/filters:
    get:
      description: Retrieves a list of comments from the database
      parameters:
        - description: Bug ID
          in: query
          name: bug_id
          type: integer
        - description: User ID
          in: query
          name: user_id
          type: string
      produces:
        - application/json
      responses:
        "200":
          description:
            comments are retrieved successfully (Comments details in the
            'Data' field)
          schema:
            $ref: "#/definitions/app.ResponseMsg"
        "400":
          description: Bad Request
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Retrieves comments
      tags:
        - comments
  /component:
    post:
      consumes:
        - application/json
      description: Create a new component for a project
      parameters:
        - description: Component data
          in: body
          name: input
          required: true
          schema:
            $ref: "#/definitions/app.createComponentInput"
      produces:
        - application/json
      responses:
        "201":
          description:
            component is created successfully (Component details in the
            'Data' field)
          schema:
            $ref: "#/definitions/app.ResponseMsg"
        "400":
          description: Failed to read component data
          schema: {}
        "401":
          description: Authentication is required
          schema: {}
        "403":
          description: Do not have access to create component
          schema: {}
        "500":
          description: Internal server error
          schema: {}
      security:
        - ApiKeyAuth: []
      summary: Create a component
      tags:
        - Components
  /component/{id}:
    delete:
      description: Delete a component by ID
      parameters:
        - description: Component ID
          in: path
          name: id
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: Component is deleted successfully
          schema:
            $ref: "#/definitions/app.ResponseMsg"
        "401":
          description: Authentication is required
          schema: {}
        "403":
          description: Do not have access to delete component
          schema: {}
        "404":
          description: Component is not found
          schema: {}
        "500":
          description: Internal server error
          schema: {}
      security:
        - ApiKeyAuth: []
      summary: Delete a component
      tags:
        - Components
    get:
      description: Get a component by ID
      parameters:
        - description: Component ID
          in: path
          name: id
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description:
            component is retrieved successfully (Component details in the
            'Data' field)
          schema:
            $ref: "#/definitions/app.ResponseMsg"
        "404":
          description: Component is not found
          schema: {}
        "500":
          description: Internal server error
          schema: {}
      summary: Get a component
      tags:
        - Components
    put:
      consumes:
        - application/json
      description: Update an existing component
      parameters:
        - description: Component ID
          in: path
          name: id
          required: true
          type: string
        - description: Component data
          in: body
          name: input
          required: true
          schema:
            $ref: "#/definitions/app.updateComponentInput"
      produces:
        - application/json
      responses:
        "200":
          description: component is updated successfully
          schema:
            $ref: "#/definitions/app.ResponseMsg"
        "400":
          description: Failed to read component data
          schema: {}
        "401":
          description: Authentication is required
          schema: {}
        "403":
          description: Do not have access to update component
          schema: {}
        "404":
          description: Component is not found
          schema: {}
        "500":
          description: Internal server error
          schema: {}
      security:
        - ApiKeyAuth: []
      summary: Update a component
      tags:
        - Components
  /component/filters:
    get:
      description: Get a list of components based on filters
      parameters:
        - description: Project ID
          in: query
          name: project_id
          type: string
        - description: Component name
          in: query
          name: name
          type: string
        - description: Creation date (after)
          in: query
          name: after
          type: string
      produces:
        - application/json
      responses:
        "200":
          description:
            Components are retrieved successfully (Components details in
            the 'Data' field)
          schema:
            $ref: "#/definitions/app.ResponseMsg"
        "500":
          description: Internal server error
          schema: {}
      summary: Get components
      tags:
        - Components
  /member:
    post:
      consumes:
        - application/json
      description: Create a new member for a project
      parameters:
        - description: Member data
          in: body
          name: input
          required: true
          schema:
            $ref: "#/definitions/app.createMemberInput"
      produces:
        - application/json
      responses:
        "201":
          description: member created successfully (Member details in the 'Data' field)
          schema:
            $ref: "#/definitions/app.ResponseMsg"
        "400":
          description: Failed to read member data
          schema: {}
        "401":
          description: Authentication is required
          schema: {}
        "403":
          description: Access denied to create member
          schema: {}
        "500":
          description: Internal server error
          schema: {}
      security:
        - ApiKeyAuth: []
      summary: Create a new member
      tags:
        - Members
  /member/{id}:
    put:
      consumes:
        - application/json
      description: Update the ownership of a member
      parameters:
        - description: Member ID
          in: path
          name: id
          required: true
          type: string
        - description: Member data
          in: body
          name: input
          required: true
          schema:
            $ref: "#/definitions/app.updateMemberInput"
      produces:
        - application/json
      responses:
        "200":
          description: Member ownership updated successfully
          schema:
            $ref: "#/definitions/app.ResponseMsg"
        "400":
          description: Failed to read member data
          schema: {}
        "401":
          description: Authentication is required
          schema: {}
        "403":
          description: Access denied to update member
          schema: {}
        "404":
          description: Member is not found
          schema: {}
        "500":
          description: Internal server error
          schema: {}
      security:
        - ApiKeyAuth: []
      summary: Update member ownership
      tags:
        - Members
  /member/{project_id}:
    get:
      description: Get a list of members in a project
      parameters:
        - description: Project ID
          in: path
          name: project_id
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description:
            members in project retrieved successfully (Members details
            in the 'Data' field)
          schema:
            $ref: "#/definitions/app.ResponseMsg"
        "500":
          description: Internal server error
          schema: {}
      summary: Get members in a project
      tags:
        - Members
  /project:
    post:
      consumes:
        - application/json
      description: Create a new project
      parameters:
        - description: Project data
          in: body
          name: input
          required: true
          schema:
            $ref: "#/definitions/app.createProjectInput"
      produces:
        - application/json
      responses:
        "201":
          description:
            Project is created successfully (Project details in the 'Data'
            field)
          schema:
            $ref: "#/definitions/app.ResponseMsg"
        "400":
          description: Failed to read project data
          schema: {}
        "401":
          description: Authentication is required
          schema: {}
        "403":
          description: Access denied to create project
          schema: {}
        "409":
          description: Project name must be unique
          schema: {}
        "500":
          description: Internal server error
          schema: {}
      security:
        - ApiKeyAuth: []
      summary: Create a new project
      tags:
        - Projects
  /project/{id}:
    delete:
      description: Delete an existing project
      parameters:
        - description: Project ID
          in: path
          name: id
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description: Project is deleted successfully
          schema:
            $ref: "#/definitions/app.ResponseMsg"
        "401":
          description: Authentication is required
          schema: {}
        "403":
          description: Access denied to delete project
          schema: {}
        "404":
          description: Project is not found
          schema: {}
        "500":
          description: Internal server error
          schema: {}
      security:
        - ApiKeyAuth: []
      summary: Delete a project
      tags:
        - Projects
    get:
      description: Get details of a project
      parameters:
        - description: Project ID
          in: path
          name: id
          required: true
          type: string
      produces:
        - application/json
      responses:
        "200":
          description:
            project is retrieved successfully (Project details in the 'Data'
            field)
          schema:
            $ref: "#/definitions/app.ResponseMsg"
        "404":
          description: Project is not found
          schema: {}
        "500":
          description: Internal server error
          schema: {}
      summary: Get a project
      tags:
        - Projects
    put:
      consumes:
        - application/json
      description: Update an existing project
      parameters:
        - description: Project ID
          in: path
          name: id
          required: true
          type: string
        - description: Project data
          in: body
          name: input
          required: true
          schema:
            $ref: "#/definitions/app.updateProjectInput"
      produces:
        - application/json
      responses:
        "200":
          description: Project is updated successfully
          schema:
            $ref: "#/definitions/app.ResponseMsg"
        "400":
          description: Failed to read project data
          schema: {}
        "401":
          description: Authentication is required
          schema: {}
        "403":
          description: Access denied to update project
          schema: {}
        "404":
          description: Project is not found
          schema: {}
        "409":
          description: Project name must be unique
          schema: {}
        "500":
          description: Internal server error
          schema: {}
      security:
        - ApiKeyAuth: []
      summary: Update a project
      tags:
        - Projects
  /project/filters:
    get:
      description: Get a list of projects based on filters
      parameters:
        - description: User ID
          in: query
          name: userid
          type: string
        - description: Project name
          in: query
          name: name
          type: string
        - description: Creation date (after)
          in: query
          name: after
          type: string
      produces:
        - application/json
      responses:
        "200":
          description:
            Projects are retrieved successfully (Projects details in the
            'Data' field)
          schema:
            $ref: "#/definitions/app.ResponseMsg"
        "500":
          description: Internal server error
          schema: {}
      summary: Get projects
      tags:
        - Projects
  /user:
    get:
      description: Retrieves the user's information
      produces:
        - application/json
      responses:
        "200":
          description: user is found (User details in the 'Data' field)
          schema:
            $ref: "#/definitions/app.ResponseMsg"
        "401":
          description: Unauthorized
          schema: {}
        "404":
          description: User does not exist
          schema: {}
        "500":
          description: Internal server error
          schema: {}
      security:
        - Bearer: []
      summary: Get user information
      tags:
        - Users
    put:
      consumes:
        - application/json
      description: Updates the user's information
      parameters:
        - description: Update user request body
          in: body
          name: request
          required: true
          schema:
            $ref: "#/definitions/app.updateUserBody"
      produces:
        - application/json
      responses:
        "200":
          description: user has been updated successfully
          schema:
            $ref: "#/definitions/app.ResponseMsg"
        "400":
          description: Bad request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "404":
          description: User does not exist
          schema: {}
        "500":
          description: Internal server error
          schema: {}
      security:
        - Bearer: []
      summary: Update user information
      tags:
        - Users
  /user/refresh-token:
    post:
      consumes:
        - application/json
      description: Generates a new access token using the provided refresh token
      parameters:
        - description: Bearer token
          in: header
          name: Authorization
          required: true
          type: string
      produces:
        - application/json
      responses:
        "201":
          description:
            token has been refreshed successfully (AccessToken & RefreshToken
            details are given in a struct in the 'Data' field)
          schema:
            $ref: "#/definitions/app.ResponseMsg"
        "400":
          description: Bad request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "500":
          description: Internal server error
          schema: {}
      security:
        - Bearer: []
      summary: Generate new access token
      tags:
        - Users
  /user/signin:
    post:
      consumes:
        - application/json
      description: Authenticates a user's credentials and generates access tokens
      parameters:
        - description: Signin request body
          in: body
          name: request
          required: true
          schema:
            $ref: "#/definitions/app.signinBody"
      produces:
        - application/json
      responses:
        "200":
          description:
            logged in successfully (AccessToken details is given in a struct
            in the 'Data' field)
          schema:
            $ref: "#/definitions/app.ResponseMsg"
        "400":
          description: Bad request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "403":
          description: Forbidden
          schema: {}
        "404":
          description: Wrong email or password
          schema: {}
        "500":
          description: Internal server error
          schema: {}
      summary: Authenticate a user and generate access tokens
      tags:
        - Users
  /user/signup:
    post:
      consumes:
        - application/json
      description:
        Creates a new user account and sends a verification code to the
        user's email
      parameters:
        - description: Signup request body
          in: body
          name: request
          required: true
          schema:
            $ref: "#/definitions/app.signupBody"
      produces:
        - application/json
      responses:
        "201":
          description: A verification code has been sent to your email
          schema:
            $ref: "#/definitions/app.ResponseMsg"
        "400":
          description: Bad request
          schema: {}
        "409":
          description: Email already exists and verified
          schema: {}
        "500":
          description: Internal server error
          schema: {}
      summary: Create a new user account
      tags:
        - Users
  /user/signup/verify:
    post:
      consumes:
        - application/json
      description:
        Verifies a user's account using the provided verification code
        and email
      parameters:
        - description: Verification request body
          in: body
          name: request
          required: true
          schema:
            $ref: "#/definitions/app.verifyBody"
      produces:
        - application/json
      responses:
        "200":
          description: verified
          schema:
            $ref: "#/definitions/app.ResponseMsg"
        "400":
          description: Bad request
          schema: {}
        "404":
          description: Email does not exist
          schema: {}
        "500":
          description: Internal server error
          schema: {}
      summary: Verify a user's account
      tags:
        - Users
