// Code generated by swaggo/swag. DO NOT EDIT.

package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/bug": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Creates a new bug with the provided input",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "bugs"
                ],
                "summary": "Create a bug",
                "parameters": [
                    {
                        "description": "Bug data",
                        "name": "bug",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/app.createBugInput"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "bug is created successfully (Bug details in the 'Data' field)",
                        "schema": {
                            "$ref": "#/definitions/app.ResponseMsg"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {}
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {}
                    }
                }
            }
        },
        "/bug/filters": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieves bugs based on the provided filters",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "bugs"
                ],
                "summary": "Get bugs",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bug category",
                        "name": "category",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Bug status",
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Component ID",
                        "name": "component_id",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "bugs are retrieved successfully (Bugs details in the 'Data' field)",
                        "schema": {
                            "$ref": "#/definitions/app.ResponseMsg"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {}
                    }
                }
            }
        },
        "/bug/{id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieves a bug by its ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "bugs"
                ],
                "summary": "Get a bug",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bug ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "bug is retrieved successfully (Bug details in the 'Data' field)",
                        "schema": {
                            "$ref": "#/definitions/app.ResponseMsg"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {}
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {}
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {}
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Updates a bug with the provided data",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "bugs"
                ],
                "summary": "Update a bug",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bug ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Bug data",
                        "name": "bug",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/app.updateBugInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "bug is updated successfully",
                        "schema": {
                            "$ref": "#/definitions/app.ResponseMsg"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {}
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {}
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {}
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Deletes a bug by its ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "bugs"
                ],
                "summary": "Delete a bug",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bug ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "bug is deleted successfully",
                        "schema": {
                            "$ref": "#/definitions/app.ResponseMsg"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {}
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {}
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {}
                    }
                }
            }
        },
        "/comment": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Creates a new comment for a bug in the database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "comments"
                ],
                "summary": "Creates a comment",
                "parameters": [
                    {
                        "description": "Comment input object",
                        "name": "commentInput",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/app.createCommentInput"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Comment is created successfully (Comment details in the 'Data' field)",
                        "schema": {
                            "$ref": "#/definitions/app.ResponseMsg"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {}
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {}
                    }
                }
            }
        },
        "/comment/filters": {
            "get": {
                "description": "Retrieves a list of comments from the database",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "comments"
                ],
                "summary": "Retrieves comments",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Bug ID",
                        "name": "bug_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "user_id",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "comments are retrieved successfully (Comments details in the 'Data' field)",
                        "schema": {
                            "$ref": "#/definitions/app.ResponseMsg"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {}
                    }
                }
            }
        },
        "/comment/{id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieves a comment by its ID from the database",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "comments"
                ],
                "summary": "Retrieves a comment",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Comment ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "comment is found successfully (Comment details in the 'Data' field)",
                        "schema": {
                            "$ref": "#/definitions/app.ResponseMsg"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {}
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {}
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {}
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Updates a comment by its ID in the database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "comments"
                ],
                "summary": "Updates a comment",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Comment ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated comment data",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/app.updateCommentInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "comment is updated successfully",
                        "schema": {
                            "$ref": "#/definitions/app.ResponseMsg"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {}
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {}
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {}
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {}
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Deletes a comment by its ID from the database",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "comments"
                ],
                "summary": "Deletes a comment",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Comment ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "comment is deleted successfully",
                        "schema": {
                            "$ref": "#/definitions/app.ResponseMsg"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {}
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {}
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {}
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {}
                    }
                }
            }
        },
        "/component": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Create a new component for a project",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Components"
                ],
                "summary": "Create a component",
                "parameters": [
                    {
                        "description": "Component data",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/app.createComponentInput"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "component is created successfully (Component details in the 'Data' field)",
                        "schema": {
                            "$ref": "#/definitions/app.ResponseMsg"
                        }
                    },
                    "400": {
                        "description": "Failed to read component data",
                        "schema": {}
                    },
                    "401": {
                        "description": "Authentication is required",
                        "schema": {}
                    },
                    "403": {
                        "description": "Do not have access to create component",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {}
                    }
                }
            }
        },
        "/component/filters": {
            "get": {
                "description": "Get a list of components based on filters",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Components"
                ],
                "summary": "Get components",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Project ID",
                        "name": "project_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Component name",
                        "name": "name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Creation date (after)",
                        "name": "after",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Components are retrieved successfully (Components details in the 'Data' field)",
                        "schema": {
                            "$ref": "#/definitions/app.ResponseMsg"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {}
                    }
                }
            }
        },
        "/component/{id}": {
            "get": {
                "description": "Get a component by ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Components"
                ],
                "summary": "Get a component",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Component ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "component is retrieved successfully (Component details in the 'Data' field)",
                        "schema": {
                            "$ref": "#/definitions/app.ResponseMsg"
                        }
                    },
                    "404": {
                        "description": "Component is not found",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {}
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Update an existing component",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Components"
                ],
                "summary": "Update a component",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Component ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Component data",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/app.updateComponentInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "component is updated successfully",
                        "schema": {
                            "$ref": "#/definitions/app.ResponseMsg"
                        }
                    },
                    "400": {
                        "description": "Failed to read component data",
                        "schema": {}
                    },
                    "401": {
                        "description": "Authentication is required",
                        "schema": {}
                    },
                    "403": {
                        "description": "Do not have access to update component",
                        "schema": {}
                    },
                    "404": {
                        "description": "Component is not found",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {}
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Delete a component by ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Components"
                ],
                "summary": "Delete a component",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Component ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Component is deleted successfully",
                        "schema": {
                            "$ref": "#/definitions/app.ResponseMsg"
                        }
                    },
                    "401": {
                        "description": "Authentication is required",
                        "schema": {}
                    },
                    "403": {
                        "description": "Do not have access to delete component",
                        "schema": {}
                    },
                    "404": {
                        "description": "Component is not found",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {}
                    }
                }
            }
        },
        "/member": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Create a new member for a project",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Members"
                ],
                "summary": "Create a new member",
                "parameters": [
                    {
                        "description": "Member data",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/app.createMemberInput"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "member created successfully (Member details in the 'Data' field)",
                        "schema": {
                            "$ref": "#/definitions/app.ResponseMsg"
                        }
                    },
                    "400": {
                        "description": "Failed to read member data",
                        "schema": {}
                    },
                    "401": {
                        "description": "Authentication is required",
                        "schema": {}
                    },
                    "403": {
                        "description": "Access denied to create member",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {}
                    }
                }
            }
        },
        "/member/{id}": {
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Update the ownership of a member",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Members"
                ],
                "summary": "Update member ownership",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Member ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Member data",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/app.updateMemberInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Member ownership updated successfully",
                        "schema": {
                            "$ref": "#/definitions/app.ResponseMsg"
                        }
                    },
                    "400": {
                        "description": "Failed to read member data",
                        "schema": {}
                    },
                    "401": {
                        "description": "Authentication is required",
                        "schema": {}
                    },
                    "403": {
                        "description": "Access denied to update member",
                        "schema": {}
                    },
                    "404": {
                        "description": "Member is not found",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {}
                    }
                }
            }
        },
        "/member/{project_id}": {
            "get": {
                "description": "Get a list of members in a project",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Members"
                ],
                "summary": "Get members in a project",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Project ID",
                        "name": "project_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "members in project retrieved successfully (Members details in the 'Data' field)",
                        "schema": {
                            "$ref": "#/definitions/app.ResponseMsg"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {}
                    }
                }
            }
        },
        "/project": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Create a new project",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Projects"
                ],
                "summary": "Create a new project",
                "parameters": [
                    {
                        "description": "Project data",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/app.createProjectInput"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Project is created successfully (Project details in the 'Data' field)",
                        "schema": {
                            "$ref": "#/definitions/app.ResponseMsg"
                        }
                    },
                    "400": {
                        "description": "Failed to read project data",
                        "schema": {}
                    },
                    "401": {
                        "description": "Authentication is required",
                        "schema": {}
                    },
                    "403": {
                        "description": "Access denied to create project",
                        "schema": {}
                    },
                    "409": {
                        "description": "Project name must be unique",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {}
                    }
                }
            }
        },
        "/project/filters": {
            "get": {
                "description": "Get a list of projects based on filters",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Projects"
                ],
                "summary": "Get projects",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "userid",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Project name",
                        "name": "name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Creation date (after)",
                        "name": "after",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Projects are retrieved successfully (Projects details in the 'Data' field)",
                        "schema": {
                            "$ref": "#/definitions/app.ResponseMsg"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {}
                    }
                }
            }
        },
        "/project/{id}": {
            "get": {
                "description": "Get details of a project",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Projects"
                ],
                "summary": "Get a project",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Project ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "project is retrieved successfully (Project details in the 'Data' field)",
                        "schema": {
                            "$ref": "#/definitions/app.ResponseMsg"
                        }
                    },
                    "404": {
                        "description": "Project is not found",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {}
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Update an existing project",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Projects"
                ],
                "summary": "Update a project",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Project ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Project data",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/app.updateProjectInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Project is updated successfully",
                        "schema": {
                            "$ref": "#/definitions/app.ResponseMsg"
                        }
                    },
                    "400": {
                        "description": "Failed to read project data",
                        "schema": {}
                    },
                    "401": {
                        "description": "Authentication is required",
                        "schema": {}
                    },
                    "403": {
                        "description": "Access denied to update project",
                        "schema": {}
                    },
                    "404": {
                        "description": "Project is not found",
                        "schema": {}
                    },
                    "409": {
                        "description": "Project name must be unique",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {}
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Delete an existing project",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Projects"
                ],
                "summary": "Delete a project",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Project ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Project is deleted successfully",
                        "schema": {
                            "$ref": "#/definitions/app.ResponseMsg"
                        }
                    },
                    "401": {
                        "description": "Authentication is required",
                        "schema": {}
                    },
                    "403": {
                        "description": "Access denied to delete project",
                        "schema": {}
                    },
                    "404": {
                        "description": "Project is not found",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {}
                    }
                }
            }
        },
        "/user": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Retrieves the user's information",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Get user information",
                "responses": {
                    "200": {
                        "description": "user is found (User details in the 'Data' field)",
                        "schema": {
                            "$ref": "#/definitions/app.ResponseMsg"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {}
                    },
                    "404": {
                        "description": "User does not exist",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {}
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Updates the user's information",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Update user information",
                "parameters": [
                    {
                        "description": "Update user request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/app.updateUserBody"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "user has been updated successfully",
                        "schema": {
                            "$ref": "#/definitions/app.ResponseMsg"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {}
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {}
                    },
                    "404": {
                        "description": "User does not exist",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {}
                    }
                }
            }
        },
        "/user/refresh-token": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Generates a new access token using the provided refresh token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Generate new access token",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "token has been refreshed successfully (AccessToken \u0026 RefreshToken details are given in a struct in the 'Data' field)",
                        "schema": {
                            "$ref": "#/definitions/app.ResponseMsg"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {}
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {}
                    }
                }
            }
        },
        "/user/signin": {
            "post": {
                "description": "Authenticates a user's credentials and generates access tokens",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Authenticate a user and generate access tokens",
                "parameters": [
                    {
                        "description": "Signin request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/app.signinBody"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "logged in successfully (AccessToken details is given in a struct in the 'Data' field)",
                        "schema": {
                            "$ref": "#/definitions/app.ResponseMsg"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {}
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {}
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {}
                    },
                    "404": {
                        "description": "Wrong email or password",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {}
                    }
                }
            }
        },
        "/user/signup": {
            "post": {
                "description": "Creates a new user account and sends a verification code to the user's email",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Create a new user account",
                "parameters": [
                    {
                        "description": "Signup request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/app.signupBody"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "A verification code has been sent to your email",
                        "schema": {
                            "$ref": "#/definitions/app.ResponseMsg"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {}
                    },
                    "409": {
                        "description": "Email already exists and verified",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {}
                    }
                }
            }
        },
        "/user/signup/verify": {
            "post": {
                "description": "Verifies a user's account using the provided verification code and email",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Verify a user's account",
                "parameters": [
                    {
                        "description": "Verification request body",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/app.verifyBody"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "verified",
                        "schema": {
                            "$ref": "#/definitions/app.ResponseMsg"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {}
                    },
                    "404": {
                        "description": "Email does not exist",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {}
                    }
                }
            }
        }
    },
    "definitions": {
        "app.ResponseMsg": {
            "type": "object",
            "properties": {
                "data": {},
                "msg": {
                    "type": "string"
                }
            }
        },
        "app.createBugInput": {
            "type": "object",
            "required": [
                "component_id"
            ],
            "properties": {
                "category": {
                    "type": "string"
                },
                "component_id": {
                    "type": "integer"
                },
                "severity": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "summary": {
                    "type": "string"
                }
            }
        },
        "app.createCommentInput": {
            "type": "object",
            "required": [
                "bug_id",
                "summary"
            ],
            "properties": {
                "bug_id": {
                    "type": "integer"
                },
                "summary": {
                    "type": "string"
                }
            }
        },
        "app.createComponentInput": {
            "type": "object",
            "required": [
                "name",
                "project_id"
            ],
            "properties": {
                "name": {
                    "type": "string"
                },
                "project_id": {
                    "type": "string"
                }
            }
        },
        "app.createMemberInput": {
            "type": "object",
            "required": [
                "project_id",
                "user_id"
            ],
            "properties": {
                "admin": {
                    "type": "boolean"
                },
                "project_id": {
                    "type": "integer"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "app.createProjectInput": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "name": {
                    "type": "string"
                }
            }
        },
        "app.signinBody": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "app.signupBody": {
            "type": "object",
            "properties": {
                "confirm_password": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "app.updateBugInput": {
            "type": "object",
            "properties": {
                "category": {
                    "type": "string"
                },
                "severity": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "summary": {
                    "type": "string"
                }
            }
        },
        "app.updateCommentInput": {
            "type": "object",
            "required": [
                "summary"
            ],
            "properties": {
                "summary": {
                    "type": "string"
                }
            }
        },
        "app.updateComponentInput": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "name": {
                    "type": "string"
                }
            }
        },
        "app.updateMemberInput": {
            "type": "object",
            "properties": {
                "admin": {
                    "type": "boolean"
                },
                "project_id": {
                    "type": "integer"
                }
            }
        },
        "app.updateProjectInput": {
            "type": "object",
            "required": [
                "name",
                "owner_id"
            ],
            "properties": {
                "name": {
                    "type": "string"
                },
                "owner_id": {
                    "type": "string"
                }
            }
        },
        "app.updateUserBody": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                }
            }
        },
        "app.verifyBody": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "verification_code": {
                    "type": "integer"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
